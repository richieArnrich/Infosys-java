Java is a high level, object oriented, platform independent
programming language.

Variables:
	Used to store data
	
	Syntax
	datatype var_name = value
	
	Data types: they specify what type of value a variable holds
	Types of data types
	1. Primitive type
	2. Non primitive type
	
	Primitive type: when a keyword behaves as a datatype it is called 
	as primitive datatype
	eg: int,long,float,double
	Non-primitive type: when a class behaves as a datatype it is called
	as non-primitive datatype
	Eg: String
	
Opertors
	Task1:
	A number when divided by 3 leaves a remainder 2 and produces an output of 7.
	Find the number
	
	Task2:
	Find a two digit number from the given digits
	x= 5
	y = 8
	output: 58 
	
	Task3:
	Given two numbers n1 = 325 n2=457
	Find a three digit number formed by the last two digits of n1 and last
	digit of n2
	output: 257
	
	Conditional Operator (Ternary Operator)
	
	Syntax:
	(condition)?"statement 1": "statement 2"
	true - statement 1 will execute
	false - statement 2 will execute
	
	
	Given three nos n1 = 15 n2 = 20 n3 = 10
	find the greatest of three using ternary operator

Increment Operators
Increment operator is used to increase the value of a variable by 1
Syntax: 
++
	Two types of increment Operators
	1. Pre increment operator
	   Syntax:
	   ++var_name

	   Working of pre-increment operator:
	   1. Increment the value of the variable by 1
	   2. Assign the updated the value to the variable
	   3. Access the updated value


	2. Post increment operator
		Syntax:
		var_name++
		WOrking of post-increment operator
		1. Assign the current value to the variable
		2. Increment the value of the variable by 1
		3. Access the updated value



Decrement Operator
Decrement operator is used to decrease the value of a variable by 1
Syntax:
----------------------------------

Control Flow Statements
Control flow statements are used to control the flow of a program. They are used to specify the order
in which the program should execute the statements.
Types of control flow statements
1. Conditional Statements
2. Loops

	Conditional Statements:
	1. If-else Statement
	2. Switch Statement
	3. Ternary Operator
	4. If-else-if ladder
	5. Nested if-else statement

	If-else:
	1. Syntax:
	if (condition){
		//code to be executed if condition is true
	}else{
		//code to be executed if condition is false
	}

	If-else-if ladder
	1. Syntax:
	if (condition1){
		//code to be executed if condition1 is true
	}else if (condition2){
		//code to be executed if condition2 is true
	}else{
		//code to be executed if condition1 and condition2 are false
	}

	Switch case:
	1. Syntax:
	switch (expression){
		case value1: {
			//code to be executed if expression equals value1
		}break;
		case value2: {
			//code to be executed if expression equals value2
		}break;
		.
		.
		.
		case valueN: {
			//code to be executed if expression equals valueN
		}break;
		default:{
			//code to be executed if expression does not match any case
		}
	}

	Nested if else:
	1. Syntax:
	if (condition1){
		if (condition2){
			//statements to be executed when condition 1 and condition 2 is true
		}else{
			//statements to be executed when condition 1 is true and condition 2 is false
		}
	}else{
		//statements to be executed when condition 1 is false
	}

	Ternary Operator:
	1. Syntax:
	(condition) ? (value if true) : (value if false)


Programs based on condition statements:
1. WAP to find whether a number is even or not 
without using % Opertor
4 
4/2 = 2
2*2 = 4

5
5/2 = 2
2*2 = 4

Loops:
Used to execute a set of statements multiple times
Types of Loops:
1. For Loop
2. While Loop
3. Do-While Loop

While Loop:
1. Syntax:
initialization
while(condition){
	//statements to be executed
	//update the condition
}
Working of while loop:
1. Initialization: The initialization is done before the while loop starts.
2. Condition: The condition is checked before the loop starts.
3. Execution: If the condition is true, the statements inside the loop are executed.
4. Update: The condition is updated after the execution of the statements inside the loop.
5. Repeat: Steps 2-4 are repeated until the condition is false.

Program1: WAP to print even nos 1 - 20
Program2: WAP to print factors of a number 
num: 8
factors: 1 2 4 8

Program3: WAP to find whether 8 is a prime number or not
Program4: WAP to print all the prime number between 1 and 10
1,2,3,5,7

For loop
1. Syntax:
for(initialization; condition; update){
	//statements to be executed
}
Working:
1. Initialization: The initialization is done before the for loop starts.
2. Condition: The condition is checked before the for loop starts.
3. Execution: If the condition is true, the statements inside the loop are executed.
4. Update: The condition is updated after the execution of the statements inside the loop.
5. Repeat: Steps 2-4 are repeated until the condition is false.
--------------------------------------------------------------------------------
Methods
Methods are blocks of code that can be called multiple times from different parts of the program. 
They are used to perform a specific task.

Syntax:
	public static void main(String[] args){
		//code
	}

	access_specifier access_modifier return_type method_name(parameter_list){
		//method_body
	}

Any method to be executed, it has to be called in another method.

Types of method:
1. Non-parameterised methods: 
A method that does not take any argument is called a no-argument method
Eg:
public static void my_method() {
		System.out.println("Hello, i am a method");
	}

2. Parameterised methods: A method which takes up arguments while being called is called as 
parameterised methods
When calling methods in another methods, the method signature must match with the calling signature

-----------------------------------------------------------------------------
Program 1: Write a function to reverse a number
Input: 1234
Output: 4321
Step 1: take the last digit
step 2: add the last digit to the reverse variable
step 3: remove the last digit from the number
Step 4: repeat until n!=0 (stop when n becomes 0)
--------------------
Program 2:
find the factorial of each digit in a number
number: 1456
Output:
factorial of 1 is: 1
factorial of 4 is: 24
factorial of 5 is: 120
factorial of 6 is : 720

--------------------------
Program 3: Armstrong number
An Armstrong number is a number that is equal to the sum of powers raised to its number of digits. For example
153 is an Armstrong number since:
1*1*1 + 5*5*5 + 3*3*3 = 153
1634: 1^4 + 6^4 + 3^4 + 4^4
----------------------------------
Program 4: Write a program to find whether a given number is perfect or not
A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding
Sum of all factors of a given number = 2*(number)
--------------------------------

Return type vs return keyword
Return type is the data type of the value returned by a method. Return keyword is used to return
a value from a method. If a method does not have a return type, it is called void
-------------------------------------------------------------------------------------------------

Static keyword
The static keyword is used to create a static method or a static variable.
Static variable:
A static variable is a varaible that can be accessed throughout the program
A static variable is shared by all the objects of a class
A static variable is created when the class is loaded into memory

Static blocks:
A static block is a block of code that is executed when the class is loaded into memory
A static block is used to initialize static variables
A static block is used to perform some operation when the class is loaded into memory

Static methods:
A static method is a method that belongs to the class rather than an instance of the class
A static method can be called without creating an object of the class
A static method can access only static variables and methods of the class

----------------------------------------------------------------------------------------
Classes And objects
A class is a blueprint or a template that defines the properties and behavior of an object
An object is an instance of a class
Properties are variables(attributes) that are given by the class

Objects are instance of a class, they carry the attributes and behaviours provided by the class.

Syntax:
className var_name = new className();
-----------------keyword|constructor call---------------------------

Constructors
A constructor is a special method of a class that is used to initialize the objects of the class
A constructor is called when an object is created
A constructor has the same name as the class
A constructor does not have a return type not even void
A constructor is used to initialize the objects of the class

Types of Constructors
1. No argument constructor (default constructor)
2. Parameterized constructor : take in inputs when the object is created

this keyword:
The this keyword is a reference to the current object of the class.
---------------------------------------------------------------------
Pillars of OOPs in Java:
1. Encapsulation
2. Inheritance
3. Polymorphism
4. Abstraction

	Encapsulation:
	- It is the concept of bundling data and methods that operate on that data within a
	single unit.
	- It is used to hide the internal details of an object from the outside world.
	- It is used to protect the data from external interference.

	How to achieve Encapsulation
	- Use access specifiers (public, private, protected)
	- Make the attributes as private (restricting direct access to the attribute)
	- Use getter and setter methods (providing indirect access to the attributes)

	Read and write attributes:
	- Getter method: used to read the attribute
	- Setter method: used to write the attribute
	- read - only getter()
	- read-write getter() and setter()
	- write - only setter()
	---------------------------------------------------------------------
--------------------------------------------------------------------------------------
Inheritance
Inheritance is a mechanism in which one class can inherit the properties of another class.
The class that is being inherited is called the parent class or superclass.
The class that is doing the inheriting is called the child class or subclass.
Inheritance is used to create a new class that is a modified version of an existing class.

Inheritance is used to create a hierarchy of classes.
Types of Inheritance:
1. Single Inheritance
2. Multiple Inheritance (Not supported in java except for interface)
3. Multilevel Inheritance
4. Hierarchical Inheritance
5. Hybrid Inheritance

Constructors and Inheritance
- The child class inherits all the properties of the parent class.
- The child class can also have its own properties.
- The child class can also have its own constructors.
- The super class constructor is not inherited
- They can be only invoked using super() call statment

super() call statement:
- It is used to invoke the constructor of the parent class.
- It is used to invoke the methods of the parent class.
- Brings about constructor chaining

Constructor chaining:
- It is the process of calling one constructor from another constructor.
- It is used to avoid code duplication.
- It is brought about using sper() and this() call statement
---------------------------------------------------------------------
Constructor Overloading
Constructor overloading is a feature of Java that allows a class to have 
multiple constructors with different parameters.
---------------------------------------------------------------------
Polymorphism
Polymorphism is the ability of an object to take on multiple forms.
There are two types of polymorphism:
1. Compile time polymorphism (static polymorphism)
2. Runtime polymorphism (dynamic polymorphism)

	Compile Time Polymorphism (CTP):
	The binding of the object and the method/constructor takes place during compile time
	It is brought about by:
	a. Constructor Overloading:
	Is a feature that allows a class to have multiple constructors with different parameters

	b. Method Overloading
	Is a feature that allows a class to have multiple methods with the same 
	name but different parameter list.
	---------------------------------------------------------------------
	Runtime Polymorphism (RTP):
	The binding of the object and the method takes place during the runtime of the program
	It is brought about by:
	a. Method Overriding
	Is a feature that allows a subclass to provide a specific implementation 
	of a method that is already available in its superclass.
	In other words:
	- A subclass can provide a different implementation of a method 
	that is already available in its superclass.

	Conditions neccessary:
	* Inheritance between classes is mandatory
	Eg: Parents are short but their children will be tall
	* The method names and the parameters in the parent and the child class has to be same.
	* The method in the child class has to be public, protected or default.
	* The method in the child class has to have the same return type as the method in the
	  super class

Abstraction:
It is the process of hiding the implementation and providing only the required functionality
It is brought about by using abstract keyword
example: Playing a game-> user : know how to play the game
						  developer: know how to implement the game
						  so the user is totally unaware about the backend implementation.

	Abstract class:
	An abstract class is a class which cannot be instantiated (create an object)
	It can abstract methods and concrete methods
	These type of classes are created using abstract keyword.
	---------------------------------------------------------------------
	Abstract method:
	An abstract method is a method which is declared but not defined
	It has a method declaration but no method body.
	---------------------------------------------------------------------
	When a concrete class extends an abstract class, it has to override all the abstract functions
	in the abstract class

	Interface in java:
	Interfaces in java are used to provide 100% abstraction, as abstract class can have
	non-abstract non-static methods.
	In interface we can have non-static abstract methods.
	We can also have static non-abstract methods

	Non-static functions are by default abstract

-------------------------------------------------------------------------------------------
Final keyword
Final in keyword in Java is used to create variables which are constant.
That is, the variables once assigned will not be able to update.

--------------------------------------------------------------------------------------------
Exception Handling in Java
	Exception handling is a mechanism to handle runtime errors or exceptions in Java.
	Exceptions are those errors which cause an abrupt termination of the execution of the 
	program
	Error will lead to compile time errors
	Exceptions are always runtime

	When an exception occurs, a throwable type of object is created, which results in the 
	abrupt termination of the program.

	Exception Object Propogation
	When an exception occurs, it is propagated to the caller of the method in which the exception
	occurred.

Handling exceptions:
* Try block: This block contains the code which may throw an exception.
* Catch block: This block contains the code which will be executed if an exception is occured.
* Finally block: This block contains the code which will be executed whether an exception is 
	occured or not.

Types of exceptions:
1. Checked exceptions: These are the exceptions which are checked at compile time.
Eg: InterruptedException
2. Unchecked exceptions: These are the exceptions which are not checked at compile time.
Eg: NullPointerException,ArithmeticException etc

Throws and Throw
Throws:
* It is used to declare that a method may throw a checked exception.
* It is used to propogate the exception from the called method to the calling method
* The calling method has to handle the exception otherwise, there will be an abrupt interuption in 
the execution

Throw:
* It is used to throw an exception from a method.
* It is used to propogate the exception from the called method to the calling method


-----------------------------------------------------------------------------------------
Arrays in Java
Arrays in Java are the collection of similar data types that are stored in contiguous memory locations.
Each element in the array is accessible using index values
Index values ranges from 0 to arr_size-1
Arrays are mutable in nature: i.e values in each index can be changed
Arrays are homogeneous in nature: i.e all elements in the array are of same data type
Arrays are of fixed size i.e we cannot increase or decrease the array size

Questions:
1. Find the sum of all elements in the array
2. Find the sum of all even elements and odd elements seperately
3. Given two arrays A and B 
A = [5,4,3,7,2,1] B = [1,2,3,6,9,0]
Find the elements which are common in both the arrays
-------------------------------------------------------------------------------------
Algorithms
Algorithms are the step-by-step procedure to solve a problem. It is a well-defined procedure to
solve a problem. It is a finite sequence of instructions to solve a problem.

Time Complexity:
* It is the measure of the time taken by an algorithm to complete its execution.
* It is usually expressed in terms of the size of the input to the algorithm.
* It is usually expressed in Big O notation.

Types of time complexities:
1. Best case time complexity: It is the time complexity when the input is in the best possible
state.
2. Average case time complexity: It is the time complexity when the input is in the average state
3. Worst case time complexity: It is the time complexity when the input is in the worst possible state
-------------------------------------------------------------------------------------
Constant Time:
* It is the time complexity when the time taken by the algorithm does not change with the size of
the input.
* It is represented as O(1)

Logarithmic TIme:
* It is the time complexity when the time taken by the algorithm is proportional to the logarithm of
the size of the input.
* It is represented as O(log n)

Linear Time:
* It is the time complexity when the time taken by the algorithm is proportional to the size of the
input.
* It is represented as O(n)
Example: Linear Search

Linear Search Algorithm:
1. Start from the first element of the array
2. Compare the target element with the current element
3. If the target element is found, return the index of the target element
4. If the target element is not found, return -1

Binary Search Algorithm
1. Start from the middle element of the array
2. Compare the target element with the middle element
3. If the target element is found, return the index of the target element
4. If the target element is not found, repeat the process with the left or right half of
the array
To find the right part of the array:
if key > arr[mid] consider only the right part of the array
else consider only the left part of the array

Time Complexity of Binary Search
* Best case time complexity: O(1)
* Average case time complexity: O(log n)
* Worst case time complexity: O(log n)
-----------------------------------------------------------
Collection Framework in Java
-----------------------------------------------------------
The Collection Framework in Java is a set of classes and interfaces that provide a way to 
store and manipulate a group of objects.

Wrapper Classes
-----------------
* Integer
* Float
* Double
* Boolean
* Character
-----------------------------------------------------------
Collection Framework
-----------------------------------------------------------
Set of classes and interfaces that provide a way to handle multiple elements
-----------------------------------------------------------
List Interface
	Properties of List interface
	* Ordered: elements in the list are Ordered
	* Indexed: elements in the list are indexed
	* Duplicates: elements in the list can be duplicates

	Disadvantage of array:
	* Fixed size: array has a fixed size
	* Homogenous type of data: could not store multiple types of data
	
	*List interface is not limited by any size, we can increase or decrease the size of the List
	as required.

------------------------------------------------------------
Queue Interface in Collection
------------------------------------------------------------
Queue Interface
	* FIFO (First In First Out) order
	* Elements are added to the end of the queue
	* Elements are removed from the front of the queue
	* Elements order is maintained
------------------------------------------------------------
Priority Queue in Java
------------------------------------------------------------
Priority Queue
	* Elements are stored based on a priority
	* Elements with higher priority are removed first
	* Insertion order is not maintained
	* Implements comparator interface
-----------------------------------------------------------
Set Interface
------------------------------------------------------------
	Set Interface
	* No duplicate elements
	* No order
	* Fast search, insertion, and deletion operations
------------------------------------------------------------
HashSet
------------------------------------------------------------
	HashSet
	* No duplicate elements
	* No order
	* Elements are not linked with each other
	* Elements are stored in a hashtable
------------------------------------------------------------
TreeSet
------------------------------------------------------------
	TreeSet
	* No duplicate elements
	* Elements are sorted in ascending order
	* Elements are linked with each other
	* Elements are stored in a tree data structure
------------------------------------------------------------
LinkedHashSet
------------------------------------------------------------
	LinkedHashSet
	* No duplicate elements
	* Elements are stored in inserted order
	* Elements are linked with each other
	* Elements are stored in a linked list and a hashtable

------------------------------------------------------------
Multithreading in Java
------------------------------------------------------------
Multitasking is the process of executing multiple applications / instances at the same time
It can be of two types:
1. Processor Level: Executing multiple applications on the processor and os is processor level
2. Thread level: Executing multiple threads of the program simultaneously
------------------------------------------------------------
What is a thread?
------------------------------------------------------------
A thread is a separate flow of execution within a program
A thread is a lightweight process
------------------------------------------------------------
How to create a thread
------------------------------------------------------------
1. Extending the Thread class
	* It implements the Runnable interface
	* It overrides the run() method
	* start() will inturn call the run()

2. Implementing the Runnable interface
	* It provides an abstract function called run()